package com.digitalbook.service;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
//import org.springframework.security.core.Authentication;
//import org.springframework.security.core.GrantedAuthority;
//import org.springframework.security.core.authority.SimpleGrantedAuthority;
//import org.springframework.security.core.context.SecurityContextHolder;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.security.core.userdetails.UsernameNotFoundException;
//import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.digitalbook.entity.user.User;
import com.digitalbook.repo.IUserRepo;


@Service
public class UserDetailsServiceImpl implements IUserDetailsService{
    @Autowired
    private IUserRepo userRepository;  
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private AuthenticationManager authenticationManager;

    public UserDetailsServiceImpl(IUserRepo userRepository) {
        this.userRepository = userRepository;   
}

    @Override
    public String userSignUp(User user) {
    	
    	if(userRepository.existsByUsername(user.getUsername())){
            return "Username is already taken!";
        }

        // add check for email exists in DB
        if(userRepository.existsByEmailId(user.getEmailId())){
            return "Email is already taken!";
        }
        User usersave = new User();
        usersave.setUsername(user.getUsername());
        usersave.setFirstName(user.getFirstName());
        usersave.setLastName(user.getLastName());
        usersave.setEmailId(user.getEmailId());
        usersave.setRoles(user.getRoles());
        usersave.setPassword(user.getPassword());

        userRepository.save(usersave);

        return "User registered successfully";
    }
  
    
    @Override
    public String userSignIn(User user) {
    	Authentication authentication =authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
        		user.getEmailId(), user.getPassword()));
    	  SecurityContextHolder.getContext().setAuthentication(authentication);
    	  return "User signed-in successfully!.";
    }
    
    
@Override
public UserDetails loadUserByUsername(String usernameOrEmail) throws UsernameNotFoundException {
      User user = userRepository.findByEmailId(usernameOrEmail)
             .orElseThrow(() ->
                     new UsernameNotFoundException("User not found with email: "+ usernameOrEmail));
    return new org.springframework.security.core.userdetails.User(user.getEmailId(),
            user.getPassword(), null);
}

@Override
public String accessRightCheck(Integer userid) {
	// TODO Auto-generated method stub
	return null;
}



}