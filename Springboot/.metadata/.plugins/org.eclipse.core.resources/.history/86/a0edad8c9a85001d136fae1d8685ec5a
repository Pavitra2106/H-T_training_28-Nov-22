package com.digitalbook.controller.user;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.loadbalancer.reactive.ExchangeFilterFunctionUtils;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import com.digitalbook.entity.user.Book;
import com.digitalbook.entity.user.User;
import com.digitalbook.service.IUserDetailsService;

@RestController
@RequestMapping("/api/v1/digitalbooks")
public class UserController {
	
	@Autowired
	private RestTemplate restTemplate;
	@Autowired
	private IUserDetailsService  userDetailsService;
	
	
	 @GetMapping("/sign/{id}")
	    public Integer authenticateUser1(@PathVariable Integer id){
	     
	        return id;
	    }
	    
//----------------------------main------------------------------------------------------------------	 
    @GetMapping("/serech/{id}")
    public Optional<Book> getBook(@PathVariable Integer id){
    
    	return this.restTemplate.getForObject("http://BOOK-SERVICE/getbook/"+id,Optional.class);
    }
    
    @PostMapping("/sign-in")
    public ResponseEntity<String> authenticateUser(@RequestBody User user){
       
    	String message=userDetailsService.userSignIn(user);
        return new ResponseEntity<>(message, HttpStatus.OK);
    }
    @PostMapping("/sign-up")
    public ResponseEntity<?> registerUser(@RequestBody User user){
    
    String message=userDetailsService.userSignUp(user);
    if(message.equals("Username is already taken!")){
        return new ResponseEntity<>(message, HttpStatus.BAD_REQUEST);
    }

    // add check for email exists in DB
    if(message.equals("Email is already taken!")){
        return new ResponseEntity<>(message, HttpStatus.BAD_REQUEST);
    }
    
    return new ResponseEntity<>("User registered successfully", HttpStatus.OK);
    
    }
        
    //-----Author can create a book------
    @PostMapping("/author/{authorid}/books")
   public Integer authorCreateBook(@PathVariable("authorid") Integer id ,@RequestBody Book bookdata) {
       String accessType=userDetailsService.accessRightCheck(id);
    if(accessType.equals("Author")) {
    	return this.restTemplate.postForObject("http://BOOK-SERVICE/addnewbook",bookdata,Integer.class);
    	
    }
    return (0);
}
    //-----Author can update a book------
    @PutMapping("/author/{authorid}/books/{bookid}")
    public HttpMethod[] authorupdateBook(@PathVariable("authorid") Integer authorid ,@PathVariable("bookid") Long bookid ,
    		@RequestBody Book bookdata) {
    	//Book bookdata =(Book) user.getBook();
    	   String accessType=userDetailsService.accessRightCheck(authorid);
    	    if(accessType.equals("Author")) {
    	    	String url="http://BOOK-SERVICE/updatebook/"+bookid;
    	    this.restTemplate.put(url+bookid,HttpMethod.values());
    	    
    	    }
    	    	//return false;
			return HttpMethod.values();
    }
    //-----Author can update book status------
    @PatchMapping("/author/{authorid}/books/{bookid}/active")
    public Boolean authorBlockUnblockBook(@PathVariable("authorid") Integer id ,@PathVariable("bookid") Integer bookid ,
    		@RequestBody Book book ) {
    	String accessType=userDetailsService.accessRightCheck(id);
	    if(accessType.equals("Author")) {
	    	String ulr ="http://BOOK-SERVICE/updatestatus/"+bookid;
	    	
	    	return this.restTemplate.patchForObject
	    			(ulr, book, Boolean.class);
	    }
    	return false;
	    }
   //--author end---------
    
    //---ReDER STSART-----
    
    @PostMapping("/readersubscribeBook/{userid}")
    public Integer readerSubscribeBook(@PathVariable("userid") Integer id,
    		@RequestBody Book book){
    	String accessType=userDetailsService.accessRightCheck(id);
	    if(accessType.equals("Reader")) {
	    	String url="http://BOOK-SERVICE/updatebook/"+id;
	    	return this.restTemplate.postForObject("http://BOOK-SERVICE/booksubcribtion",book,Integer.class);
	    }
	    return null;
	 }
 
    
    @GetMapping("/readers/{userid}/books")
    public List<Book> readerAllSubscribeBook(@PathVariable("userid") Integer id){
    	String accessType=userDetailsService.accessRightCheck(id);
	    if(accessType.equals("Reader")) {
	    	List<Book> allBook=this.restTemplate.getForObject("http://BOOK-SERVICE/allsubcribtionbooks/"+id,List.class);
		return allBook;
	    }
	    return null;
    }
    
    @GetMapping("/readers/{userid}/books/{subscribeid}")
    public Optional<Book> subscribeByIdBook(@PathVariable("userid") Integer id ,@PathVariable("subscribeid") Integer subscribeid){
    	String accessType=userDetailsService.accessRightCheck(id);
	    if(accessType.equals("Reader")) {
	    	Optional<Book> subscribedBook=this.restTemplate.getForObject("http://BOOK-SERVICE/subcribedbook/"+id+"/"+subscribeid,Optional.class);
		if(!subscribedBook.isEmpty()) {
	    	return subscribedBook;
	    }
	    else {
	    	return null;//--no book found with yourid subscribeid
	      }
       }
		return null;
    }
    
    @GetMapping("/readers/{userid}/books/{subscribeid}/read")
    public String readSubscribedBook(@PathVariable("userid") Integer id ,@PathVariable("subscribeid") Integer subscribeid){
    	String accessType=userDetailsService.accessRightCheck(id);
	    if(accessType.equals("Reader")) {
	    	String subscribedBookContent =this.restTemplate.getForObject("http://BOOK-SERVICE/readsubcribedbook/"+id+"/"+subscribeid,String.class);
	    }
	    return "You are not authorized for this action ";
    }
    
    @DeleteMapping("/readers/{userid}/books/{subscribeid}/cancale-subscription")
    public Exception deletesubscription(@PathVariable("userid") Integer id ,@PathVariable("subscribeid") Integer subscribeid){
    	
    	String accessType=userDetailsService.accessRightCheck(id);
    	
	    if(accessType.equals("Reader")) {
	    	try{
	    		this.restTemplate.delete("http://BOOK-SERVICE/deletesubcribedbook/"+id+"/"+subscribeid);
	    	}
	    	catch(Exception e){
	    		{
	    			return e;
	    		}
	    	}
	    }
		return null;
    }
}