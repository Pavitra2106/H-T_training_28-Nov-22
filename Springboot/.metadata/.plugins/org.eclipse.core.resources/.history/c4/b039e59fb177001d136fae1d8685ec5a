package com.token.Utility;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import java.util.function.Function;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class JWTUtility implements Serializable {

	private static final long serialVersionUID = 297347L;
    public static final long JWT_TOKEN_VALIDITY=5*60*60;
    private String sceretkey="Pavitra";
    
	 public String getUsernameFromToken(String token) {
		 return getClaimFromToken(token, Claims:: getSubject);
	 }
	 
	 public Date getExpirationdateFromToken(String token) {
		 return getClaimFromToken(token, Claims:: getExpiration);
	 }

	private <T> T getClaimFromToken(String token, Function<Claims ,T > claimResolver) {
		final Claims claims = getAllClaimsFromToken(token);
		return claimResolver.apply(claims);
	}
	
	private Claims getAllClaimsFromTokenClaims(String token) {
	return Jwts.parser().setSigningKey(sceretkey).parseClaimsJws(token).getBody();
	}
	
	private Boolean isTokenExpired(String token) {
		final Date expiration = getExpirationdateFromToken(token);
		return expiration.before(new Date());
	}
	
	public String generateToken(UserDetails userDetails) {
		Map <String, Object> claims = new HashMap<>();
		return 	doGenerateToken(claims ,userDetails.getUsername());
		
	}

	private String doGenerateToken(Map<String, Object> claims, String subject) {
		
		return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis()+ JWT_TOKEN_VALIDITY *1000))
				.signWith(SignatureAlgorithm.HS512,sceretkey ).compact();		
	}
}
