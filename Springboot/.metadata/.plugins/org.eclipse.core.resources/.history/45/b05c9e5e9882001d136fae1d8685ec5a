package com.user.controller;

import java.util.Collections;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.user.entity.User;
import com.user.repo.IRoleRepo;
import com.user.repo.IUserRepo;
import com.user.validator.UserValidator;

@RestController
@RequestMapping("/api/v1/digitalbooks")
public class UserController {
	@Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private IUserRepo userRepository;

    @Autowired
    private IRoleRepo roleRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @PostMapping("/signin")
    public ResponseEntity<String> authenticateUser(@RequestBody User user){
        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
        		user.getEmailId(), user.getPassword()));

        SecurityContextHolder.getContext().setAuthentication(authentication);
        return new ResponseEntity<>("User signed-in successfully!.", HttpStatus.OK);
    }

    @PostMapping("/signup")
    public ResponseEntity<?> registerUser(@RequestBody User user){

        // add check for username exists in a DB
        if(userRepository.existsByUsername(user.getUsername())){
            return new ResponseEntity<>("Username is already taken!", HttpStatus.BAD_REQUEST);
        }

        // add check for email exists in DB
        if(userRepository.existsByEmail(user.getEmailId())){
            return new ResponseEntity<>("Email is already taken!", HttpStatus.BAD_REQUEST);
        }

        // create user object
        User usersave = new User();
        usersave.setUsername(user.getUsername());
        
        usersave.setEmailId(user.getEmailId());
        usersave.setPassword(passwordEncoder.encode(user.getPassword()));

        Role roles = roleRepository.findByName("ROLE_ADMIN").get();
        usersave.setRoles(Collections.singleton(roles));

        userRepository.save(usersave);

        return new ResponseEntity<>("User registered successfully", HttpStatus.OK);

    }
}